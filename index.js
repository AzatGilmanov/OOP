//1. Программы - сложны!!
//200+ строк
//разбивка на модули
//модульность
//разбиение на модули:очень тяжело,надо осознавать какие есть модули ,какие взаимосвязи..
//программитсы обычно не знают как ООП устроен, знают как выполнить просто сделать свою задачу
//11 1111 111 11 111111   111 
//рефакторинг-перезапись кода(когда мы улучшаем код без написания функции, по другому распределяем= уменьшение количества кода,багов)
//определение сущностей
//ООП-Абстракция- построение  модели-оставляю важные параметры(свойства,методы)
//user(username, password,email)
// user(login(), logout(), ....)
// Самое сложное Построить хорошую серьезную ООП(начало ООП,создание модели, построение абстракции)
//ООП начинается с построения абстракции!!!!
//Наследование________
//user(модель)-когда пользователь взодит на сайт ,он должен видеть какие то курсы...____user.Getcourses___user.rate___user.role-админ,студент,модератор
//user( login(),logout()- username,password, email)
let user = {
    username : '',
    password : '',
    email : '',
    role : ''
    //методы
    //сбросить пароль
};
//наследование - расширение
//admin - это расширение user
 admin (user){
     //changeUserStatus()
     //changeUserCourses
     // перезаписать метод getCourses(){ полчить все курсы}
 }
 student (user){
     //rate
     //getCourses()
 }
 // Два кита ООП : абстрагирование и наследование
 // ООП строится на понимание сущности абстрагирования и наследования_часто делается на бумаге, в начале.
 //Полиморфизм..понимание приходит когда пишешь код...